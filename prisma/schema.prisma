generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id      String @id @default(uuid())
  email   String @unique()
  hash    String
  nome    String
  celular String

  roleId String
  role   Role   @relation(fields: [roleId], references: [id])

  dataCriacao     DateTime      @default(now())
  dataAtualizacao DateTime      @updatedAt
  UsuarioLoja     UsuarioLoja[]

  @@map("usuarios")
}

model UsuarioLoja {
  id        String   @id @default(uuid())
  usuarioId String
  usuario   Usuario? @relation(fields: [usuarioId], references: [id])
  lojaId    String
  loja      Loja?    @relation(fields: [lojaId], references: [id])

  @@map("usuarioLojas")
}

model Loja {
  id              String   @id @default(uuid())
  nome            String
  imageURL        String?
  icone           String?
  dataCriacao     DateTime @default(now())
  dataAtualizacao DateTime @updatedAt

  statusId              String?
  status                LojaStatus?            @relation(fields: [statusId], references: [id])
  categorias            Categoria[]
  produtos              Produto[]
  formasPagamento       FormaPagamento[]
  horariosFuncionamento HorarioFuncionamento[]
  UsuarioLoja           UsuarioLoja[]

  @@map("lojas")
}

model LojaStatus {
  id    String @id @default(uuid())
  nome  String
  lojas Loja[]

  @@map("lojaStatus")
}

model Categoria {
  id              String   @id @default(uuid())
  nome            String
  dataCriacao     DateTime @default(now())
  dataAtualizacao DateTime @updatedAt

  lojaId   String
  loja     Loja      @relation(fields: [lojaId], references: [id])
  produtos Produto[]

  @@map("categorias")
}

model Produto {
  id              String   @id @default(uuid())
  nome            String
  imagemURL       String?
  valor           Decimal
  dataCriacao     DateTime @default(now())
  dataAtualizacao DateTime @updatedAt

  categoriaId String
  categoria   Categoria @relation(fields: [categoriaId], references: [id])

  lojaId            String
  loja              Loja               @relation(fields: [lojaId], references: [id])
  produtoOpcoes     ProdutoOpcao[]
  produtoAdicionais ProdutoAdicional[]

  @@map("produtos")
}

model ProdutoOpcao {
  id              String   @id @default(uuid())
  nome            String
  dataCriacao     DateTime @default(now())
  dataAtualizacao DateTime @updatedAt

  produtoId         String
  produto           Produto            @relation(fields: [produtoId], references: [id])
  produtoOpcaoItems ProdutoOpcaoItem[]

  @@map("produtoOpcoes")
}

model ProdutoOpcaoItem {
  id              String   @id @default(uuid())
  nome            String
  dataCriacao     DateTime @default(now())
  dataAtualizacao DateTime @updatedAt

  produtoOpcaoId String
  produtoOpcao   ProdutoOpcao @relation(fields: [produtoOpcaoId], references: [id])

  @@map("produtoOpcaoItens")
}

model ProdutoAdicional {
  id              String   @id @default(uuid())
  nome            String
  valor           Decimal
  dataCriacao     DateTime @default(now())
  dataAtualizacao DateTime @updatedAt

  produtoId String
  produto   Produto @relation(fields: [produtoId], references: [id])

  @@map("produtoAdicionais")
}

model FormaPagamento {
  id              String   @id @default(uuid())
  nome            String
  dataCriacao     DateTime @default(now())
  dataAtualizacao DateTime @updatedAt

  lojaId String
  loja   Loja @relation(fields: [lojaId], references: [id])

  @@map("formasPagamento")
}

model HorarioFuncionamento {
  id              String   @id @default(uuid())
  nome            String
  horaInicio      String
  horaFim         String
  dataCriacao     DateTime @default(now())
  dataAtualizacao DateTime @updatedAt

  lojaId String
  loja   Loja @relation(fields: [lojaId], references: [id])

  @@map("horariosFuncionamento")
}

model Role {
  id      String    @id @default(uuid())
  nome    String
  Usuario Usuario[]
}
